import pandas as pd
import sonny_acquire


def replace_nulls_in_df(df):
    """
    Takes in the dataframe and replaces the nulls with 0
    """
    return df.fillna(0)


def add_calculated_columns(df):
    """
    Takes in a df (without nulls) and creates multiple calculated columns based on the original numerical columns. All pct columns have been multiplied by 100 to generate numbers that people understand as pct, but if smaller numbers are desired this multiplier can be removed. If the order of columns is not satisfactory, the functions can be rearranged in the desired order.
    """
    # Calculate cases per 1k, 10k, & 100k
    df["cases_per_1k"] = df["num_covid_cases"] / (df["population"] / 1000)
    df["cases_per_10k"] = df["num_covid_cases"] / (df["population"] / 10000)
    df["cases_per_100k"] = df["num_covid_cases"] / (df["population"] / 100000)
    # Calculate positivity rate (cases / tests)
    df["positivity_rate"] = df["num_covid_cases"] / df["total_tests"]
    # Update population density (how many people per sq mile of land in the county)
    df["pop_density"] = df["population"] / df["LandAreaSQMiles2010"]
    # Convert numerical columns into percents
    df["low_food_access_pct"] = (df["LACCESS_POP15"] / df["population"]) * 100
    # of all children, what proportion live below poverty line?
    df["pov_under_18_pct"] = (df["PovertyUnder18Num"] / df["Under18Num2010"]) * 100
    # of all population, what proportion live below poverty line?
    df["pov_pct"] = (df["PovertyAllAgesNum"] / df["population"]) * 100
    df["senior_pct"] = (df["Age65AndOlderNum2010"] / df["population"]) * 100
    df["children_pct"] = (df["Under18Num2010"] / df["population"]) * 100
    # of all heads of household, what proportion own their own homes? Rent?
    df["home_owner_pct"] = (df["OwnHomeNum"] / df["TotalHH"]) * 100
    df["renter_pct"] = 100 - df["home_owner_pct"]
    # of all heads of households, what proportion are female?
    df["female_hh_pct"] = (df["FemaleHHNum"] / df["TotalHH"]) * 100
    # of all heads of households, what proportion are over 65 and live alone?
    df["senior_hh_pct"] = (df["HH65PlusAloneNum"] / df["TotalHH"]) * 100
    # of all heads of households, what proportion do not speak english?
    df["non_english_hh_pct"] = (df["NonEnglishHHNum"] / df["TotalHH"]) * 100
    # of the adult population, what proportion have what level of education?
    df["Ed1_pct"] = (
        df["Ed1LessThanHSNum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    df["Ed2_pct"] = (
        df["Ed2HSDiplomaOnlyNum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    df["Ed3_pct"] = (
        df["Ed3SomeCollegeNum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    df["Ed4_pct"] = (
        df["Ed4AssocDegreeNum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    df["Ed5_pct"] = (
        df["Ed5CollegePlusNum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    # of the population, what proportion are various races?
    df["white_pct"] = (df["WhiteNonHispanicNum2010"] / df["population"]) * 100
    df["black_pct"] = (df["BlackNonHispanicNum2010"] / df["population"]) * 100
    df["asian_pct"] = (df["AsianNonHispanicNum2010"] / df["population"]) * 100
    df["nat_am_pct"] = (df["NativeAmericanNonHispanicNum2010"] / df["population"]) * 100
    df["hispanic_pct"] = (df["HispanicNum2010"] / df["population"]) * 100
    df["multi_race_pct"] = (df["MultipleRaceNum2010"] / df["population"]) * 100
    # How does the median income for vets compare to the median income in the county?
    df["med_inc_vet_vs_civ"] = (df["MedianVetsInc"] / df["MedianNonVetsInc"]) * 100
    # What proportion of the adult population is a vet?
    df["all_vet_pct"] = (
        df["Vets18ONum"] / (df["population"] - df["Under18Num2010"])
    ) * 100
    # What proportion of the adult population is disabled?
    df["disabled_pct"] = (
        (df["NonVetsDisabilty"] + df["VetsDisabilty"])
        / (df["population"] - df["Under18Num2010"])
    ) * 100
    # What proportion of the vet population is poor?
    df["poor_vets_pct"] = (df["VetsPoor"] / df["Vets18ONum"]) * 100
    
    return df

def capitalize_county(df):
    '''
    Takes in the merged dataframe and returns it with 
    the county names capitalized
    '''
    df['County'] = df.County.str.title()
    return df


def create_population_density_category_column(df):
    """Takes in dataframe and returns a new column with population 
    density grouped into 3 categories:
    Low - This will be all the counties that have a population density that are in the bottom 25%
    High - This will be all the counties that have a population density that are in the top 25%
    Mid - These will be the remaining counties
    """
    pop_density_bin_labels = ["low", "mid", "high"]
    df["pop_density_category"] = pd.qcut(df["pop_density"],
                                         q=[0, .25, .75, 1],
                                         labels=pop_density_bin_labels)
    return df


def create_infection_pct_category__column(df):
    """Takes in dataframe and returns a new column with infection rate grouped into 3 categories:
    Low - This will be all the counties that have a Infection percentage that are in the bottom 25%
    High - This will be all the counties that have a Infection percentage that are in the top 25%
    Mid - These will be the remaining counties
    """
    infection_pct_bin_labels = ["low", "mid", "high"]
    df["infection_pct_category"] = pd.qcut(df["infection_pct"],
                                           q=[0, .25, .75, 1],
                                           labels=infection_pct_bin_labels)
    return df


def prep_dataframe(df):
    df = replace_nulls_in_df(df)
    df = add_calculated_columns(df)
    df = capitalize_county(df)
    df = create_population_density_category_column(df)
    df = create_infection_pct_category__column(df)

    return df