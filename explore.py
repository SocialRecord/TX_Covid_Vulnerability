import pandas as pd

#visualization
import seaborn as sns
import matplotlib.pyplot as plt

#Set figure size for all plots
plt.rc("figure", figsize = (16,16))

#Set fontsize for titles
plt.rc("font", size=14)

def distro_plot_for_single_column(dataframe, column_name):
    """Taked in a dataframe name and column name
    and return a distrobution plot for that column"""
    
    #Set figure size for all plots
    plt.rc("figure", figsize = (16,16))

    #Set fontsize for titles
    plt.rc("font", size=14)
    
    #Set color for distro plot
    c = "#00c5ff"
    plt.title(f"Distribution plot for {column_name}")
    sns.distplot(dataframe[column_name], color = c)


def distro_plot_for_entire_dataframe(df):
    """Takes in a dataframe that has only numeric
    columns and returns a distrobution plot 
    for each column
    """
    for i, col in enumerate(df.columns):
        plt.figure(i)
        distro_plot_for_single_column(df, col)

        
def plot_region_barplots(df):
    """
    Takes in our dataframe and creates a barplot by region for the following:
    - RPL_THEME1 - Socioeconomic 
    - RPL_THEME2 - Household Composition & Disability
    - RPL_THEME3 - Minority Status & Language
    - RPL_THEME4 - Housing Type & Transportation
    - RPL_THEMES - Overall tract summary ranking variable
    - num_covid_cases - number of covid cases  
    """
    plt.figure(figsize= (16,16))

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.subplot(3,2,1)
    sns.barplot(x=df['Public Health Region (11)'], y =df['RPL_THEME1'], color ='#00c5ff')
    plt.title("What is the Distribution of the Socioeconomic SVI?")

    plt.subplot(3,2,2)
    sns.barplot(x=df['Public Health Region (11)'], y =df['RPL_THEME2'], color ='#00c5ff')
    plt.title("What is the Distribution of the Household Composition & Disability SVI?")

    plt.subplot(3,2,3)
    sns.barplot(x=df['Public Health Region (11)'], y =df['RPL_THEME3'], color ='#00c5ff')
    plt.title("What is the Distribution of the Minority Status & Language SVI?")

    plt.subplot(3,2,4)
    sns.barplot(x=df['Public Health Region (11)'], y =df['RPL_THEME4'], color ='#00c5ff')
    plt.title("What is the Distribution of the Housing Type & Transportation SVI?")

    plt.subplot(3,2,5)
    sns.barplot(x=df['Public Health Region (11)'], y =df['RPL_THEMES'], color ='#00c5ff')
    plt.title("What is the Distribution of the Overall tract summary ranking variable?")

    plt.subplot(3,2,6)
    sns.barplot(x=df['Public Health Region (11)'], y =df['num_covid_cases'], color ='#00c5ff')
    plt.title("What is the Distribution of Covid19 Cases?")

    plt.show()


    
def plot_categorical_pop_density_barplots(df):
    """
    Takes in our dataframe and creates a barplot by population density (categorical) for the following:
    - RPL_THEME1 - Socioeconomic 
    - RPL_THEME2 - Household Composition & Disability
    - RPL_THEME3 - Minority Status & Language
    - RPL_THEME4 - Housing Type & Transportation
    - RPL_THEMES - Overall tract summary ranking variable
    - num_covid_cases - number of covid cases  
    """
    plt.figure(figsize= (16,16))

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.subplot(3,2,1)
    sns.barplot(x=df['pop_density_category'], y =df['RPL_THEME1'], color ='#00c5ff')
    plt.title("What is the Distribution of the Socioeconomic SVI?")

    plt.subplot(3,2,2)
    sns.barplot(x=df['pop_density_category'], y =df['RPL_THEME2'], color ='#00c5ff')
    plt.title("What is the Distribution of the Household Composition & Disability SVI?")

    plt.subplot(3,2,3)
    sns.barplot(x=df['pop_density_category'], y =df['RPL_THEME3'], color ='#00c5ff')
    plt.title("What is the Distribution of the Minority Status & Language SVI?")

    plt.subplot(3,2,4)
    sns.barplot(x=df['pop_density_category'], y =df['RPL_THEME4'], color ='#00c5ff')
    plt.title("What is the Distribution of the Housing Type & Transportation SVI?")

    plt.subplot(3,2,5)
    sns.barplot(x=df['pop_density_category'], y =df['RPL_THEMES'], color ='#00c5ff')
    plt.title("What is the Distribution of the Overall tract summary ranking variable?")

    plt.subplot(3,2,6)
    sns.barplot(x=df['pop_density_category'], y =df['num_covid_cases'], color ='#00c5ff')
    plt.title("What is the Distribution of Covid19 Cases?")

    plt.show()

    
        
def get_regional_dataframe(df, region_num):
    """
    Takes in the dataframe and the health region ID number
    and creates a a dataframe for the specified region
    """
    mask = df["Public Health Region (11)"] == region_num
    region_df = df[mask]
    
    return region_df


def get_all_region_subsets_for_distro(df):
    """
    Takes in the big dataframe and subsets the data
    into regions and uses the only the folloeing columns:
    RPL_THEME1,
    RPL_THEME2,
    RPL_THEME3,
    RPL_THEME4,
    RPL_THEMES,
    num_covid_cases
    """
    #subset the datatframes
    df_1 = get_regional_dataframe(df, 1)
    df_2 = get_regional_dataframe(df, 2)
    df_3 = get_regional_dataframe(df, 3)
    df_4 = get_regional_dataframe(df, 4)
    df_5 = get_regional_dataframe(df, 5)
    df_6 = get_regional_dataframe(df, 6)
    df_7 = get_regional_dataframe(df, 7)
    df_8 = get_regional_dataframe(df, 8)
    df_9 = get_regional_dataframe(df, 9)
    df_10 = get_regional_dataframe(df, 10)
    df_11 = get_regional_dataframe(df, 11)
    
    #Columns we will use for the distroplots
    col_to_keep = ['RPL_THEME1',
              'RPL_THEME2',
              'RPL_THEME3',
              'RPL_THEME4',
              'RPL_THEMES',
              'num_covid_cases']
    
    df_1 = df_1[col_to_keep]
    df_2 = df_2[col_to_keep]
    df_3 = df_3[col_to_keep]
    df_4 = df_4[col_to_keep]
    df_5 = df_5[col_to_keep]
    df_6 = df_6[col_to_keep]
    df_7 = df_7[col_to_keep]
    df_8 = df_8[col_to_keep]
    df_9 = df_9[col_to_keep]
    df_10 = df_10[col_to_keep]
    df_11 = df_11[col_to_keep]
    
    return df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8, df_9, df_10, df_11


def get_pop_density_categoricaol_subset(df):
    """
    Takes in the dataframe and creates a dataframe for low, mid and high population density
    """
    #create dataframe for each subset
    masklow = df['pop_density_category'] == "low"
    df_low = df[masklow]
    
    maskmid = df['pop_density_category'] == "mid"
    df_mid = df[maskmid]

    maskhigh = df['pop_density_category'] == "mid"
    df_high = df[maskhigh]
    
    return df_low, df_mid, df_high


def pop_density_categoricaol_subset_for_distro_plots(df):
    """
    Takes in the dataframe for low, mid and high population density and removes all
    columns except the following:
    RPL_THEME1,
    RPL_THEME2,
    RPL_THEME3,
    RPL_THEME4,
    RPL_THEMES,
    num_covid_cases
    """
    
    #bring in subsets
    df_low, df_mid, df_high = get_pop_density_categoricaol_subset(df)
    
    #columns to keep
    col_to_keep = ['RPL_THEME1',
              'RPL_THEME2',
              'RPL_THEME3',
              'RPL_THEME4',
              'RPL_THEMES',
              'num_covid_cases']
    
    #get the df for distro plots
    df_low = df_low[col_to_keep]
    df_mid = df_mid[col_to_keep]
    df_high = df_high[col_to_keep]
    
    return df_low, df_mid, df_high